<tool id="rsem_calculate_expression" name="RSEM calculate expression" version="1.3.0">
  <description>RNA-Seq by Expectation-Maximization</description>
  <stdio>
    <exit_code range="1:"  level="fatal" description="Error Running RSEM" />
  </stdio>
  <command><![CDATA[
    rsem-calculate-expression 

    --num-threads "\${GALAXY_SLOTS:-1}"
    --star
    --temporary-folder /tmp/rsem

    ## Basic Options

    --strandedness $basic.strandedness
    $append_names

    #if $basic.seed:
      --seed $basic.seed
    #end if

    $basic.single_cell_prior
    $basic.calc_pme

    #if $basic.ci.calc_ci:
      --calc-ci
      --ci-credibility-level $basic.ci.ci_level
      --ci-number-of-samples-per-count-vector $basic.ci.ci_samples
    #end if
    $basic.sort_bam_by_name

    ## Outputs

    #if $output.bam == 'none':
      --no-bam-output
    #elif $output.bam == 'both':
      --output-genome-bam
    #end if
    $output.sampling_for_bam
    $output.sort_bam_by_coord

    ## Advanced Options

    #if $advanced.tag:
      --tag $advanced.tag
    #end if

    ## RSPD
    #if $advanced.rspd.estimate == 'yes':
      --estimate-rspd
      --num-rspd-bins $advanced.rspd.bins
    #end if

    # Gibbs
    --gibbs-burnin $advanced.gibbs.burnin
    --gibbs-number-of-samples $advanced.gibbs.samples
    --gibbs-sampling-gap $advanced.gibbs.gap

    # Library parameters

    --fragment-length-min  $advanced.library.min
    --fragment-length-max  $advanced.library.max
    --fragment-length-mean $advanced.library.mean
    --fragment-length-sd   $advanced.library.sd

    ## Input data
    #if $input.format=="fastq"
      $input.fastq_quals
      #if $input.fastq.run=="single": 
        $input.fastq.singlefastq
      #elif $input.fastq.run=="paired":
        --paired-end
        $input.fastq.fastq1
        $input.fastq.fastq2
      #end if
    #elif $input.format=="fasta"
      --no-qualities
      #if $input.fasta.run=="single": 
        $input.fasta.singlefasta
      #elif $input.fasta.run=="paired":
        --paired-end
        $input.fasta.fasta1
        $input.fasta.fasta2
      #end if
    #elif $input.format=="sam"
      --alignments
      #if $input.run=="paired":
        --paired-end
      #end if
      $input.rsem_sam
    #end if

    ## RSEM reference
    #if $reference.source == 'history':
      ${reference.rsem_ref.extra_files_path}/${reference.rsem_ref.metadata.reference_name}
    #elif $reference.source == 'cached':
      ${reference.index.fields.path}
    #end if

    ## sample_name: use a hard coded name so we can pull out galaxy outputs
    rsem_output

  ]]></command>
  <inputs>
    <conditional name="input">
      <param name="format" type="select" label="RSEM Input file type">
        <option value="fastq">FASTQ</option>
        <option value="fasta">FASTA</option>
        <option value="sam">SAM/BAM/CRAM</option>
      </param>
      <when value="fastq">
        <param name="fastq_quals" size="15" type="select" label="FASTQ quality encoding" >
          <option value="--phred33-quals" selected="true">sanger</option>
          <option value="--solexa-quals">solexa</option>
          <option value="--phred64-quals">phred64</option>
        </param>
        <conditional name="fastq">
          <param name="run" type="select" label="Library type">
            <option value="single">Single End Reads</option>
            <option value="paired">Paired End Reads</option>
          </param>
          <when value="single">
            <param name="singlefastq" type="data" format="fastq" label="FASTQ file" />
          </when>
          <when value="paired">
            <param name="fastq1" type="data" format="fastq" label="Read 1 fastq file" />
            <param name="fastq2" type="data" format="fastq" label="Read 2 fastq file" />
          </when>
        </conditional>
      </when>
      <when value="fasta">
        <conditional name="fasta">
          <param name="run" type="select" label="Library Type">
            <option value="single">Single End Reads</option>
            <option value="paired">Paired End Reads</option>
          </param>
          <when value="single">
            <param name="singlefasta" type="data" format="fasta" label="fasta file" />
          </when>
          <when value="paired">
            <param name="fasta1" type="data" format="fasta" label="Read 1 fasta file" />
            <param name="fasta2" type="data" format="fasta" label="Read 2 fasta file" />
          </when>
        </conditional>
      </when>
      <when value="sam">
          <!-- convert-sam-for-rsem /ref/mouse_125 input.sam -o input_for_rsem.sam -->
          <param name="run" type="select" label="Library Type">
            <option value="single">Single End Reads</option>
            <option value="paired">Paired End Reads</option>
          </param>
          <param name="rsem_sam" type="data" format="rsem_sam" label="RSEM-formatted BAM/SAM/CRAM file" />
      </when>
    </conditional>

    <conditional name="reference">
      <param name="source" type="select" label="RSEM Reference Source">
        <option value="cached">Locally cached</option>
        <option value="history">From your history</option>
      </param>
      <when value="cached">
        <param name="index" type="select" label="Select RSEM reference" help="Select from a list of pre-indexed references. If you don't see anything consult the wrapper's documentation on how to create or download a reference">
          <options from_data_table="rsem_indices">
            <filter type="sort_by" column="2" />
            <validator type="no_options" message="No indexes are available" />
          </options>
        </param>
      </when>
      <when value="history">
        <param name="rsem_ref" type="data" format="rsem_ref" label="RSEM reference" />
      </when>
    </conditional>

    <section name="basic" title="Basic options" expanded="true">
      <param name="strandedness" type="select" label="Library strand-specificity">
        <option value="none" selected="true">none</option>
        <option value="forward">forward</option>
        <option value="reverse">reverse</option>
      </param>
      <param name="seed" type="integer" optional="true" min="0" max="4294967295" label="Seed for RNG" help="Set the seed for the random number generators used in calculating posterior mean estimates and credibility intervals.  The seed must be a non-negative 32 bit integer." />
      <param name="single_cell_prior" type="boolean" truevalue="--single-cell-prior" falsevalue="" checked="false" label="Use single-cell prior" />
      <param name="calc_pme" type="boolean" truevalue="--calc-pme" falsevalue="" checked="false" label="Calculate posterior mean estimates" />
      <conditional name="ci">
        <param name="calc_ci" type="boolean" checked="false" label="Calculate confidence intervals" />
        <when value="false" />
        <when value="true">
          <param name="ci_level" type="float" value="0.95" min="0" max="1" label="Credibility level"/>
          <param name="ci_samples" type="integer" value="50" label="Number of probability vectors sampled per count vector" />
        </when>
      </conditional>
      <param name="sort_bam_by_name" type="boolean" truevalue="--sort-bam-by-read-name" falsevalue="" checked="false" label="Sort BAM by read name (allows deterministic estimation)" />
    </section>

    <section name="output" title="Output" expanded="false">
      <param name="bam" type="select" label="Create bam results files" 
             help="In addition to the transcript-coordinate-based BAM file output, also output a BAM file with the read alignments in genomic coordinates" >
        <option value="none" selected="true">No BAM results files</option>
        <option value="transcripts">Transcript BAM results file</option>
        <option value="both">Transcript and genome BAM results files</option>
      </param>
      <param name="sampling_for_bam" type="boolean" truevalue="--sampling-for-bam" falsevalue="" checked="false" label="Sample one alignment per read" />
      <param name="sort_bam_by_coord" type="boolean" truevalue="--sort-bam-by-coordinate" falsevalue="" checked="false" label="Sort BAM output by coordinate" />
    </section>

    <section name="advanced" title="Advanced options" expanded="false">
      <param name="tag" type="text" optional="true" label="SAM field for multiple alignments" help="The name of the optional field used in the SAM input for identifying a read with too many valid alignments" />
      <conditional name="rspd">
        <param name="estimate" type="boolean" checked="false" label="Estimate read start position distribution (RSPD)" help="Set this option if you want to estimate the read start position distribution (RSPD) from data. Otherwise, RSEM will use a uniform RSPD." />
          <when value="false" />
          <when value="true"> 
            <param name="bins" type="integer" value="20" min="1" max="100" optional="true" label="Number of bins in the RSPD." help="Use of the default setting of 20 is recommended." />
          </when>
      </conditional>
      <section name="library" title="Library parameters">
        <param name="min" type="integer" value="1" label="Fragment length minimum" />
        <param name="max" type="integer" value="1000" label="Fragment length maximum" />
        <param name="mean" type="integer" value="-1" label="Fragment length mean (-1 disables)" />
        <param name="sd" type="integer" value="0" label="Fragment length standard deviation" />
      </section>
      <section name="gibbs" title="Gibbs">
        <param name="burnin" type="integer" value="200" label="Gibbs burn-in" />
        <param name="samples" type="integer" value="1000" label="Gibbs sample number" />
        <param name="gap" type="integer" value="1" label="Gibbs sampling gap" />
      </section>
    </section>

  </inputs>
  <outputs>
    <data format="tabular" name="gene_abundances" label="${sample}.gene_abundances" from_work_dir="rsem_output.genes.results"/>
    <data format="tabular" name="isoform_abundances" label="${sample}.isoform_abundances" from_work_dir="rsem_output.isoforms.results"/>
    <data format="bam" name="transcript_bam" label="${sample}.transcript.bam" from_work_dir="rsem_output.transcript.bam" >
      <filter>rsem_outputs['result_bams'] != "none"</filter>
    </data>
    <data format="bam" name="transcript_sorted_bam" label="${sample}.transcript.bam" from_work_dir="rsem_output.transcript.sorted.bam" >
      <filter>rsem_outputs['result_bams'] != "none"</filter>
    </data>
    <data format="bam" name="genome_bam" label="${sample}.genome.bam" from_work_dir="rsem_output.genome.bam">
      <filter>rsem_outputs['result_bams'] == "both"</filter>
    </data>
    <data format="bam" name="genome_sorted_bam" label="${sample}.genome.sorted.bam" from_work_dir="rsem_output.genome.sorted.bam">
      <filter>rsem_outputs['result_bams'] == "both"</filter>
    </data>
    <data format="txt" name="log" label="${sample}.rsem_log"/>
  </outputs>
  <tests>
  </tests>
  <help>
  </help> 
</tool> 
